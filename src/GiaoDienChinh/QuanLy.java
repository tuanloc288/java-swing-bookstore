/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GiaoDienChinh;

import java.awt.Color;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import QuanLySanPham.QuanLySanPhamBUS;
import QuanLyTheLoai.QuanLyTheLoaiBUS;
import QuanLyKhachHang.QuanLyKhachHangBUS;
import QuanLyNhanVien.QuanLyNhanVienBUS;
import QuanLyTaiKhoan.QuanLyTaiKhoanBUS;
import QuanLyHoaDon.QuanLyHoaDonBUS;
import QuanLyChiTietHoaDon.QuanLyChiTietHoaDonBUS;

import QuanLySanPham.SanPham;
import QuanLyKhachHang.KhachHang;
import QuanLyNhanVien.NhanVien;
import QuanLyTaiKhoan.TaiKhoan;
import QuanLyTheLoai.TheLoai;
import QuanLyHoaDon.HoaDon;

import java.awt.Image;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.event.TableModelEvent;

/**
 *
 * @author Admin
 */
public class QuanLy extends javax.swing.JFrame {

    QuanLySanPhamBUS qlsp = new QuanLySanPhamBUS();
    QuanLyTheLoaiBUS qltl = new QuanLyTheLoaiBUS();
    QuanLyKhachHangBUS qlkh = new QuanLyKhachHangBUS();
    QuanLyNhanVienBUS qlnv = new QuanLyNhanVienBUS();
    QuanLyTaiKhoanBUS qltk = new QuanLyTaiKhoanBUS();
    QuanLyHoaDonBUS qlhd = new QuanLyHoaDonBUS();
    QuanLyChiTietHoaDonBUS qlcthd = new QuanLyChiTietHoaDonBUS();

    public String currentUser;

    DefaultTableModel sellProductModel;
    DefaultTableModel billProductModel;
    DefaultTableModel bookModel;
    DefaultTableModel categoryModel;
    DefaultTableModel billModel;
    DefaultTableModel employeeModel;
    DefaultTableModel customerModel;
    DefaultTableModel accountModel;

    /**
     * Creates new form QuanLy
     */
    public QuanLy() {
        initComponents();
        setLocationRelativeTo(null);
        homePanel.setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        CallAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        employeeName = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        navBar = new javax.swing.JPanel();
        sellManagement = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        bookManagement = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        categoryManagement = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        billManagement = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        employeeManagement = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        customerManagement = new javax.swing.JPanel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        accountManagement = new javax.swing.JPanel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        main = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        welcomeEmployee = new javax.swing.JLabel();
        sellPanel = new javax.swing.JPanel();
        sellLeftPanel = new javax.swing.JPanel();
        productScrollpane = new javax.swing.JScrollPane();
        sellProductTable = new javax.swing.JTable();
        sellSearchField = new javax.swing.JTextField();
        authorsComboBox = new javax.swing.JComboBox<>();
        categoriesComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        priceFrom = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        priceTo = new javax.swing.JTextField();
        detailLv1 = new javax.swing.JPanel();
        productImg = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        detailProductID = new javax.swing.JTextField();
        detailCategoryID = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        detailProductName = new javax.swing.JTextField();
        quantity = new javax.swing.JTextField();
        addToBill = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        billDetail = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        sellRightPanel = new javax.swing.JPanel();
        billID = new javax.swing.JLabel();
        billTotalPrice = new javax.swing.JLabel();
        billEmployee = new javax.swing.JLabel();
        customersComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        billProductTable = new javax.swing.JTable();
        removeProduct = new javax.swing.JLabel();
        cancelBill = new javax.swing.JLabel();
        payBill = new javax.swing.JLabel();
        bookPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addBook = new javax.swing.JLabel();
        deleteBook = new javax.swing.JLabel();
        updateBook = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        bookPriceFrom = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        bookPriceTo = new javax.swing.JTextField();
        bookAuthorsComboBox = new javax.swing.JComboBox<>();
        bookCategoriesComboBox = new javax.swing.JComboBox<>();
        bookSearchField = new javax.swing.JTextField();
        refresh = new javax.swing.JLabel();
        categoryPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addCategory = new javax.swing.JLabel();
        deleteCategory = new javax.swing.JLabel();
        updateCategory = new javax.swing.JLabel();
        refreshCategory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        billPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        billHeadersComboBox = new javax.swing.JComboBox<>();
        billSearchField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        billPriceFrom = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        billPriceTo = new javax.swing.JTextField();
        watchBillDetail = new javax.swing.JLabel();
        billTableRefresh = new javax.swing.JLabel();
        employeePanel = new javax.swing.JPanel();
        tempPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        addEmployee = new javax.swing.JLabel();
        deleteEmployee = new javax.swing.JLabel();
        updateEmployee = new javax.swing.JLabel();
        refreshEmployeeTable = new javax.swing.JLabel();
        customerPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        addCustomer = new javax.swing.JLabel();
        deleteCustomer = new javax.swing.JLabel();
        updateCustomer = new javax.swing.JLabel();
        refreshCustomerTable = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        accountPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        accountTable = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        updateAccount = new javax.swing.JLabel();
        refreshAccountTable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1320, 725));
        setMinimumSize(new java.awt.Dimension(1320, 725));
        setUndecorated(true);

        headerPanel.setBackground(new java.awt.Color(0, 0, 0));
        headerPanel.setForeground(new java.awt.Color(255, 255, 255));
        headerPanel.setMaximumSize(new java.awt.Dimension(1320, 50));
        headerPanel.setMinimumSize(new java.awt.Dimension(1320, 50));
        headerPanel.setPreferredSize(new java.awt.Dimension(1320, 50));

        employeeName.setForeground(new java.awt.Color(255, 255, 255));
        employeeName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        employeeName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/log-out.png"))); // NOI18N
        employeeName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeNameMouseClicked(evt);
            }
        });

        exitLabel.setBackground(new java.awt.Color(0, 0, 0));
        exitLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        exitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabelMouseClicked(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Quản lý cửa hàng sách");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(employeeName)
                .addGap(0, 0, 0)
                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitLabel)
                .addGap(23, 23, 23))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(employeeName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        navBar.setBackground(new java.awt.Color(51, 51, 51));
        navBar.setMaximumSize(new java.awt.Dimension(220, 675));
        navBar.setMinimumSize(new java.awt.Dimension(220, 675));
        navBar.setPreferredSize(new java.awt.Dimension(220, 675));

        sellManagement.setBackground(new java.awt.Color(51, 51, 51));
        sellManagement.setPreferredSize(new java.awt.Dimension(220, 75));
        sellManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sellManagementMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/book-store.png"))); // NOI18N
        jLabel1.setText("Bán hàng");

        javax.swing.GroupLayout sellManagementLayout = new javax.swing.GroupLayout(sellManagement);
        sellManagement.setLayout(sellManagementLayout);
        sellManagementLayout.setHorizontalGroup(
            sellManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator4)
        );
        sellManagementLayout.setVerticalGroup(
            sellManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sellManagementLayout.createSequentialGroup()
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        bookManagement.setBackground(new java.awt.Color(51, 51, 51));
        bookManagement.setMaximumSize(new java.awt.Dimension(205, 50));
        bookManagement.setMinimumSize(new java.awt.Dimension(205, 50));
        bookManagement.setPreferredSize(new java.awt.Dimension(205, 50));
        bookManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookManagementMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(240, 240, 240));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/book.png"))); // NOI18N
        jLabel2.setText("Sách");

        javax.swing.GroupLayout bookManagementLayout = new javax.swing.GroupLayout(bookManagement);
        bookManagement.setLayout(bookManagementLayout);
        bookManagementLayout.setHorizontalGroup(
            bookManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
        );
        bookManagementLayout.setVerticalGroup(
            bookManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookManagementLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        categoryManagement.setBackground(new java.awt.Color(51, 51, 51));
        categoryManagement.setPreferredSize(new java.awt.Dimension(205, 50));
        categoryManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryManagementMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/category.png"))); // NOI18N
        jLabel4.setText("Thể loại");

        javax.swing.GroupLayout categoryManagementLayout = new javax.swing.GroupLayout(categoryManagement);
        categoryManagement.setLayout(categoryManagementLayout);
        categoryManagementLayout.setHorizontalGroup(
            categoryManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        categoryManagementLayout.setVerticalGroup(
            categoryManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryManagementLayout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        billManagement.setBackground(new java.awt.Color(51, 51, 51));
        billManagement.setMinimumSize(new java.awt.Dimension(205, 50));
        billManagement.setPreferredSize(new java.awt.Dimension(220, 75));
        billManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billManagementMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bill.png"))); // NOI18N
        jLabel6.setText("Hóa đơn");
        jLabel6.setPreferredSize(new java.awt.Dimension(95, 75));

        javax.swing.GroupLayout billManagementLayout = new javax.swing.GroupLayout(billManagement);
        billManagement.setLayout(billManagementLayout);
        billManagementLayout.setHorizontalGroup(
            billManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        billManagementLayout.setVerticalGroup(
            billManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billManagementLayout.createSequentialGroup()
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        employeeManagement.setBackground(new java.awt.Color(51, 51, 51));
        employeeManagement.setPreferredSize(new java.awt.Dimension(220, 75));
        employeeManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeManagementMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/employee.png"))); // NOI18N
        jLabel7.setText("Nhân viên");

        javax.swing.GroupLayout employeeManagementLayout = new javax.swing.GroupLayout(employeeManagement);
        employeeManagement.setLayout(employeeManagementLayout);
        employeeManagementLayout.setHorizontalGroup(
            employeeManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        employeeManagementLayout.setVerticalGroup(
            employeeManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeManagementLayout.createSequentialGroup()
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        customerManagement.setBackground(new java.awt.Color(51, 51, 51));
        customerManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerManagementMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/customer.png"))); // NOI18N
        jLabel8.setText("Khách hàng");

        javax.swing.GroupLayout customerManagementLayout = new javax.swing.GroupLayout(customerManagement);
        customerManagement.setLayout(customerManagementLayout);
        customerManagementLayout.setHorizontalGroup(
            customerManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator6)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
        );
        customerManagementLayout.setVerticalGroup(
            customerManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerManagementLayout.createSequentialGroup()
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        accountManagement.setBackground(new java.awt.Color(51, 51, 51));
        accountManagement.setPreferredSize(new java.awt.Dimension(220, 75));
        accountManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountManagementMouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/account.png"))); // NOI18N
        jLabel9.setText("Tài khoản");

        javax.swing.GroupLayout accountManagementLayout = new javax.swing.GroupLayout(accountManagement);
        accountManagement.setLayout(accountManagementLayout);
        accountManagementLayout.setHorizontalGroup(
            accountManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator7)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        accountManagementLayout.setVerticalGroup(
            accountManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountManagementLayout.createSequentialGroup()
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout navBarLayout = new javax.swing.GroupLayout(navBar);
        navBar.setLayout(navBarLayout);
        navBarLayout.setHorizontalGroup(
            navBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sellManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bookManagement, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
            .addComponent(categoryManagement, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
            .addComponent(billManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(employeeManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(customerManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(accountManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        navBarLayout.setVerticalGroup(
            navBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navBarLayout.createSequentialGroup()
                .addComponent(sellManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bookManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(categoryManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(billManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(employeeManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(customerManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(accountManagement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
        );

        main.setBackground(new java.awt.Color(255, 255, 255));
        main.setMaximumSize(new java.awt.Dimension(1100, 675));
        main.setMinimumSize(new java.awt.Dimension(1100, 675));
        main.setPreferredSize(new java.awt.Dimension(1100, 675));

        homePanel.setPreferredSize(new java.awt.Dimension(995, 450));

        welcomeEmployee.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        welcomeEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/welcomeEmployee.png"))); // NOI18N
        welcomeEmployee.setPreferredSize(new java.awt.Dimension(995, 450));

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeEmployee, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );

        sellPanel.setPreferredSize(new java.awt.Dimension(1100, 675));

        sellLeftPanel.setMaximumSize(new java.awt.Dimension(550, 675));
        sellLeftPanel.setMinimumSize(new java.awt.Dimension(550, 675));
        sellLeftPanel.setPreferredSize(new java.awt.Dimension(550, 675));

        productScrollpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        productScrollpane.setMaximumSize(new java.awt.Dimension(550, 300));
        productScrollpane.setMinimumSize(new java.awt.Dimension(550, 300));
        productScrollpane.setPreferredSize(new java.awt.Dimension(550, 300));

        sellProductTable.setAutoCreateRowSorter(true);
        sellProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên", "Loại", "Giá", "Kho"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sellProductTable.setGridColor(new java.awt.Color(0, 0, 0));
        sellProductTable.setMaximumSize(new java.awt.Dimension(550, 300));
        sellProductTable.setMinimumSize(new java.awt.Dimension(550, 300));
        sellProductTable.setPreferredSize(new java.awt.Dimension(550, 300));
        sellProductTable.getTableHeader().setReorderingAllowed(false);
        sellProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sellProductTableMouseClicked(evt);
            }
        });
        productScrollpane.setViewportView(sellProductTable);
        if (sellProductTable.getColumnModel().getColumnCount() > 0) {
            sellProductTable.getColumnModel().getColumn(0).setMinWidth(80);
            sellProductTable.getColumnModel().getColumn(0).setPreferredWidth(80);
            sellProductTable.getColumnModel().getColumn(0).setMaxWidth(80);
            sellProductTable.getColumnModel().getColumn(2).setMinWidth(100);
            sellProductTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            sellProductTable.getColumnModel().getColumn(2).setMaxWidth(100);
            sellProductTable.getColumnModel().getColumn(3).setMinWidth(80);
            sellProductTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            sellProductTable.getColumnModel().getColumn(3).setMaxWidth(80);
            sellProductTable.getColumnModel().getColumn(4).setMinWidth(60);
            sellProductTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            sellProductTable.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        sellSearchField.setBackground(new java.awt.Color(240, 240, 240));
        sellSearchField.setBorder(null);
        sellSearchField.setPreferredSize(new java.awt.Dimension(275, 21));
        sellSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sellSearchFieldKeyReleased(evt);
            }
        });

        authorsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tác giả" }));
        authorsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorsComboBoxActionPerformed(evt);
            }
        });

        categoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thể loại" }));
        categoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Theo giá: Từ");

        priceFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceFromKeyReleased(evt);
            }
        });

        jLabel5.setText("đến");

        priceTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceToKeyReleased(evt);
            }
        });

        detailLv1.setPreferredSize(new java.awt.Dimension(550, 287));

        productImg.setBackground(new java.awt.Color(255, 255, 255));
        productImg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productImg.setOpaque(true);

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Mã sản phẩm");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Mã thể loại");

        detailProductID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detailProductID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        detailProductID.setFocusable(false);

        detailCategoryID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detailCategoryID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        detailCategoryID.setFocusable(false);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Tên sách");

        detailProductName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detailProductName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        detailProductName.setFocusable(false);

        quantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantityKeyReleased(evt);
            }
        });

        addToBill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addToBill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addToBill.setText("Thêm vào hóa đơn");
        addToBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBillActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Số lượng");

        javax.swing.GroupLayout detailLv1Layout = new javax.swing.GroupLayout(detailLv1);
        detailLv1.setLayout(detailLv1Layout);
        detailLv1Layout.setHorizontalGroup(
            detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailLv1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productImg, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLv1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, detailLv1Layout.createSequentialGroup()
                                .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(detailProductID))
                                .addGap(68, 68, 68)
                                .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(detailCategoryID)))
                            .addComponent(detailProductName)
                            .addGroup(detailLv1Layout.createSequentialGroup()
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addToBill)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32))
                    .addGroup(detailLv1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        detailLv1Layout.setVerticalGroup(
            detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailLv1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLv1Layout.createSequentialGroup()
                        .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(detailProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(detailCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailLv1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addToBill))
                        .addGap(0, 61, Short.MAX_VALUE))
                    .addComponent(productImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        billDetail.setBackground(new java.awt.Color(0, 0, 0));
        billDetail.setForeground(new java.awt.Color(255, 255, 255));
        billDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/billDetail.png"))); // NOI18N
        billDetail.setText("Xem chi tiết");
        billDetail.setOpaque(true);
        billDetail.setPreferredSize(new java.awt.Dimension(62, 20));
        billDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billDetailMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout sellLeftPanelLayout = new javax.swing.GroupLayout(sellLeftPanel);
        sellLeftPanel.setLayout(sellLeftPanelLayout);
        sellLeftPanelLayout.setHorizontalGroup(
            sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellLeftPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sellLeftPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sellSearchField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(sellLeftPanelLayout.createSequentialGroup()
                        .addComponent(authorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(0, 0, 0)
                        .addComponent(priceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel5)
                        .addGap(0, 0, 0)
                        .addComponent(priceTo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(detailLv1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
            .addGroup(sellLeftPanelLayout.createSequentialGroup()
                .addComponent(productScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        sellLeftPanelLayout.setVerticalGroup(
            sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sellLeftPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sellSearchField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(billDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sellLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(detailLv1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        sellRightPanel.setBackground(new java.awt.Color(51, 51, 51));
        sellRightPanel.setPreferredSize(new java.awt.Dimension(550, 675));

        billID.setBackground(new java.awt.Color(255, 255, 255));
        billID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        billID.setForeground(new java.awt.Color(255, 255, 255));
        billID.setFocusable(false);

        billTotalPrice.setBackground(new java.awt.Color(255, 255, 255));
        billTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        billTotalPrice.setForeground(new java.awt.Color(255, 255, 255));

        billEmployee.setBackground(new java.awt.Color(255, 255, 255));
        billEmployee.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billEmployee.setFocusable(false);
        billEmployee.setOpaque(true);

        customersComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        customersComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn khách hàng" }));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");

        billProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã SP", "Tên", "Đơn giá", "Số lượng", "Giảm giá", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billProductTable.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(billProductTable);
        if (billProductTable.getColumnModel().getColumnCount() > 0) {
            billProductTable.getColumnModel().getColumn(0).setMinWidth(45);
            billProductTable.getColumnModel().getColumn(0).setPreferredWidth(45);
            billProductTable.getColumnModel().getColumn(0).setMaxWidth(45);
            billProductTable.getColumnModel().getColumn(1).setMinWidth(60);
            billProductTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            billProductTable.getColumnModel().getColumn(1).setMaxWidth(60);
            billProductTable.getColumnModel().getColumn(3).setMinWidth(85);
            billProductTable.getColumnModel().getColumn(3).setPreferredWidth(85);
            billProductTable.getColumnModel().getColumn(3).setMaxWidth(85);
            billProductTable.getColumnModel().getColumn(4).setMinWidth(65);
            billProductTable.getColumnModel().getColumn(4).setPreferredWidth(65);
            billProductTable.getColumnModel().getColumn(4).setMaxWidth(65);
            billProductTable.getColumnModel().getColumn(5).setMinWidth(60);
            billProductTable.getColumnModel().getColumn(5).setPreferredWidth(60);
            billProductTable.getColumnModel().getColumn(5).setMaxWidth(60);
        }

        removeProduct.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        removeProduct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.png"))); // NOI18N
        removeProduct.setText("Xóa");
        removeProduct.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        removeProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeProductMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
            .addComponent(removeProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(removeProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
        );

        cancelBill.setBackground(new java.awt.Color(255, 255, 255));
        cancelBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelBill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancelBill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.jpg"))); // NOI18N
        cancelBill.setText("Hủy đơn hàng");
        cancelBill.setToolTipText("");
        cancelBill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cancelBill.setOpaque(true);
        cancelBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBillMouseClicked(evt);
            }
        });

        payBill.setBackground(new java.awt.Color(255, 255, 255));
        payBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        payBill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        payBill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pay.png"))); // NOI18N
        payBill.setText("Thanh toán");
        payBill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        payBill.setOpaque(true);
        payBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                payBillMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout sellRightPanelLayout = new javax.swing.GroupLayout(sellRightPanel);
        sellRightPanel.setLayout(sellRightPanelLayout);
        sellRightPanelLayout.setHorizontalGroup(
            sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sellRightPanelLayout.createSequentialGroup()
                        .addComponent(cancelBill, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(payBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(sellRightPanelLayout.createSequentialGroup()
                        .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(billID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customersComboBox, 0, 260, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(billEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(billTotalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))))
                .addContainerGap())
        );
        sellRightPanelLayout.setVerticalGroup(
            sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellRightPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(billID, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(billTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(customersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(billEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(sellRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(payBill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout sellPanelLayout = new javax.swing.GroupLayout(sellPanel);
        sellPanel.setLayout(sellPanelLayout);
        sellPanelLayout.setHorizontalGroup(
            sellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellPanelLayout.createSequentialGroup()
                .addComponent(sellLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sellRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sellPanelLayout.setVerticalGroup(
            sellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sellLeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
            .addComponent(sellRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );

        bookPanel.setMaximumSize(new java.awt.Dimension(1100, 675));
        bookPanel.setMinimumSize(new java.awt.Dimension(1100, 675));
        bookPanel.setPreferredSize(new java.awt.Dimension(1100, 675));

        bookTable.setAutoCreateRowSorter(true);
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên", "Tác giả", "Kích cỡ", "Thể loại", "Bìa", "Ngày PH", "Giảm giá", "Kho", "Nhà XB", "Trang", "Giá", "Nhà PH", "Dịch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.setGridColor(new java.awt.Color(0, 0, 0));
        bookTable.setOpaque(false);
        jScrollPane2.setViewportView(bookTable);
        if (bookTable.getColumnModel().getColumnCount() > 0) {
            bookTable.getColumnModel().getColumn(3).setMinWidth(80);
            bookTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            bookTable.getColumnModel().getColumn(3).setMaxWidth(80);
            bookTable.getColumnModel().getColumn(4).setHeaderValue("Lưu");
            bookTable.getColumnModel().getColumn(5).setHeaderValue("Bìa");
            bookTable.getColumnModel().getColumn(6).setMinWidth(65);
            bookTable.getColumnModel().getColumn(6).setPreferredWidth(65);
            bookTable.getColumnModel().getColumn(6).setMaxWidth(65);
            bookTable.getColumnModel().getColumn(6).setHeaderValue("Ngày PH");
            bookTable.getColumnModel().getColumn(7).setMinWidth(50);
            bookTable.getColumnModel().getColumn(7).setPreferredWidth(50);
            bookTable.getColumnModel().getColumn(7).setMaxWidth(50);
            bookTable.getColumnModel().getColumn(7).setHeaderValue("Giảm giá");
            bookTable.getColumnModel().getColumn(8).setMinWidth(40);
            bookTable.getColumnModel().getColumn(8).setPreferredWidth(40);
            bookTable.getColumnModel().getColumn(8).setMaxWidth(40);
            bookTable.getColumnModel().getColumn(8).setHeaderValue("Kho");
            bookTable.getColumnModel().getColumn(9).setHeaderValue("Nhà XB");
            bookTable.getColumnModel().getColumn(10).setMinWidth(40);
            bookTable.getColumnModel().getColumn(10).setPreferredWidth(40);
            bookTable.getColumnModel().getColumn(10).setMaxWidth(40);
            bookTable.getColumnModel().getColumn(10).setHeaderValue("Trang");
            bookTable.getColumnModel().getColumn(11).setMinWidth(65);
            bookTable.getColumnModel().getColumn(11).setPreferredWidth(65);
            bookTable.getColumnModel().getColumn(11).setMaxWidth(65);
            bookTable.getColumnModel().getColumn(11).setHeaderValue("Giá");
            bookTable.getColumnModel().getColumn(12).setHeaderValue("Nhà PH");
            bookTable.getColumnModel().getColumn(13).setMinWidth(80);
            bookTable.getColumnModel().getColumn(13).setPreferredWidth(80);
            bookTable.getColumnModel().getColumn(13).setMaxWidth(80);
            bookTable.getColumnModel().getColumn(13).setHeaderValue("Dịch");
        }

        addBook.setBackground(new java.awt.Color(255, 255, 255));
        addBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addBook.setText("Thêm sản phẩm");
        addBook.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addBook.setOpaque(true);
        addBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBookMouseClicked(evt);
            }
        });

        deleteBook.setBackground(new java.awt.Color(255, 255, 255));
        deleteBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.png"))); // NOI18N
        deleteBook.setText("Xóa sản phẩm");
        deleteBook.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteBook.setOpaque(true);
        deleteBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBookMouseClicked(evt);
            }
        });

        updateBook.setBackground(new java.awt.Color(255, 255, 255));
        updateBook.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateBook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fix.png"))); // NOI18N
        updateBook.setText("Cập nhật sản phẩm");
        updateBook.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateBook.setOpaque(true);
        updateBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBookMouseClicked(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel24.setText("Theo giá: Từ");

        bookPriceFrom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bookPriceFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookPriceFromKeyReleased(evt);
            }
        });

        jLabel25.setText("đến");

        bookPriceTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookPriceToKeyReleased(evt);
            }
        });

        bookAuthorsComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bookAuthorsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tác giả" }));
        bookAuthorsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAuthorsComboBoxActionPerformed(evt);
            }
        });

        bookCategoriesComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bookCategoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thể loại" }));
        bookCategoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookCategoriesComboBoxActionPerformed(evt);
            }
        });

        bookSearchField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bookSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookSearchFieldKeyReleased(evt);
            }
        });

        refresh.setBackground(new java.awt.Color(255, 255, 255));
        refresh.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        refresh.setText("Làm mới");
        refresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refresh.setOpaque(true);
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(bookSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel24))
                            .addComponent(bookAuthorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(updateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(bookCategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(bookPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bookPriceTo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(334, 334, 334))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(bookPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(bookPriceTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookCategoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookAuthorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bookPanelLayout = new javax.swing.GroupLayout(bookPanel);
        bookPanel.setLayout(bookPanelLayout);
        bookPanelLayout.setHorizontalGroup(
            bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bookPanelLayout.setVerticalGroup(
            bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        categoryPanel.setMaximumSize(new java.awt.Dimension(1100, 675));
        categoryPanel.setPreferredSize(new java.awt.Dimension(1100, 675));

        addCategory.setBackground(new java.awt.Color(255, 255, 255));
        addCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addCategory.setText("Thêm thể loại");
        addCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addCategory.setOpaque(true);
        addCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCategoryMouseClicked(evt);
            }
        });

        deleteCategory.setBackground(new java.awt.Color(255, 255, 255));
        deleteCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.png"))); // NOI18N
        deleteCategory.setText("Xóa thể loại");
        deleteCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteCategory.setOpaque(true);
        deleteCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteCategoryMouseClicked(evt);
            }
        });

        updateCategory.setBackground(new java.awt.Color(255, 255, 255));
        updateCategory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fix.png"))); // NOI18N
        updateCategory.setText("Cập nhật thể loại");
        updateCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateCategory.setOpaque(true);
        updateCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateCategoryMouseClicked(evt);
            }
        });

        refreshCategory.setBackground(new java.awt.Color(255, 255, 255));
        refreshCategory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refreshCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refreshCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        refreshCategory.setText("Làm mới");
        refreshCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshCategory.setOpaque(true);
        refreshCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshCategoryMouseClicked(evt);
            }
        });

        categoryTable.setAutoCreateRowSorter(true);
        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã thể loại", "Tên thể loại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        categoryTable.setGridColor(new java.awt.Color(0, 0, 0));
        categoryTable.setOpaque(false);
        jScrollPane3.setViewportView(categoryTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(addCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(deleteCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(updateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(refreshCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout categoryPanelLayout = new javax.swing.GroupLayout(categoryPanel);
        categoryPanel.setLayout(categoryPanelLayout);
        categoryPanelLayout.setHorizontalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        categoryPanelLayout.setVerticalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        billTable.setAutoCreateRowSorter(true);
        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã HĐ", "Mã NV", "Mã KH", "Ngày lập", "Giờ lập", "Tổng cộng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billTable.setGridColor(new java.awt.Color(0, 0, 0));
        billTable.setOpaque(false);
        jScrollPane4.setViewportView(billTable);
        if (billTable.getColumnModel().getColumnCount() > 0) {
            billTable.getColumnModel().getColumn(3).setMinWidth(80);
            billTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            billTable.getColumnModel().getColumn(3).setMaxWidth(80);
            billTable.getColumnModel().getColumn(4).setHeaderValue("Lưu");
            billTable.getColumnModel().getColumn(5).setHeaderValue("Bìa");
        }

        jLabel12.setText("Tìm kiếm theo");

        billSearchField.setBackground(new java.awt.Color(240, 240, 240));
        billSearchField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        billSearchField.setBorder(null);
        billSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billSearchFieldKeyReleased(evt);
            }
        });

        jLabel26.setText("Tìm kiếm theo giá: Từ");

        billPriceFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billPriceFromKeyReleased(evt);
            }
        });

        jLabel27.setText("đến");

        billPriceTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billPriceToKeyReleased(evt);
            }
        });

        watchBillDetail.setBackground(new java.awt.Color(0, 0, 0));
        watchBillDetail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        watchBillDetail.setForeground(new java.awt.Color(255, 255, 255));
        watchBillDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        watchBillDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/billDetail.png"))); // NOI18N
        watchBillDetail.setText("Xem chi tiết");
        watchBillDetail.setOpaque(true);
        watchBillDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                watchBillDetailMouseClicked(evt);
            }
        });

        billTableRefresh.setBackground(new java.awt.Color(255, 255, 255));
        billTableRefresh.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        billTableRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        billTableRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        billTableRefresh.setText("Làm mới");
        billTableRefresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        billTableRefresh.setOpaque(true);
        billTableRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billTableRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout billPanelLayout = new javax.swing.GroupLayout(billPanel);
        billPanel.setLayout(billPanelLayout);
        billPanelLayout.setHorizontalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(billPanelLayout.createSequentialGroup()
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(billPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(billTableRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(watchBillDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, billPanelLayout.createSequentialGroup()
                        .addGap(396, 396, 396)
                        .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(billPanelLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(billPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(billPriceTo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(billPanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(billHeadersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(billSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(401, Short.MAX_VALUE))
        );
        billPanelLayout.setVerticalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPanelLayout.createSequentialGroup()
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(billPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(billHeadersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(billPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(billSearchField)))
                .addGap(21, 21, 21)
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(billPriceFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(billPriceTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(billTableRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(watchBillDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        employeePanel.setPreferredSize(new java.awt.Dimension(1100, 675));

        tempPanel.setMaximumSize(new java.awt.Dimension(1100, 675));
        tempPanel.setMinimumSize(new java.awt.Dimension(1100, 675));

        employeeTable.setAutoCreateRowSorter(true);
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã NV", "Tên", "Ngày sinh", "Địa chỉ", "SĐT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeeTable.setGridColor(new java.awt.Color(0, 0, 0));
        employeeTable.setOpaque(false);
        jScrollPane5.setViewportView(employeeTable);
        if (employeeTable.getColumnModel().getColumnCount() > 0) {
            employeeTable.getColumnModel().getColumn(3).setMinWidth(80);
            employeeTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            employeeTable.getColumnModel().getColumn(3).setMaxWidth(80);
            employeeTable.getColumnModel().getColumn(4).setHeaderValue("Lưu");
        }

        addEmployee.setBackground(new java.awt.Color(255, 255, 255));
        addEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addEmployee.setText("Thêm nhân viên");
        addEmployee.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addEmployee.setOpaque(true);
        addEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addEmployeeMouseClicked(evt);
            }
        });

        deleteEmployee.setBackground(new java.awt.Color(255, 255, 255));
        deleteEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.png"))); // NOI18N
        deleteEmployee.setText("Xóa nhân viên");
        deleteEmployee.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteEmployee.setOpaque(true);
        deleteEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteEmployeeMouseClicked(evt);
            }
        });

        updateEmployee.setBackground(new java.awt.Color(255, 255, 255));
        updateEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateEmployee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fix.png"))); // NOI18N
        updateEmployee.setText("Cập nhật nhân viên");
        updateEmployee.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateEmployee.setOpaque(true);
        updateEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateEmployeeMouseClicked(evt);
            }
        });

        refreshEmployeeTable.setBackground(new java.awt.Color(255, 255, 255));
        refreshEmployeeTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refreshEmployeeTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refreshEmployeeTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        refreshEmployeeTable.setText("Làm mới");
        refreshEmployeeTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshEmployeeTable.setOpaque(true);
        refreshEmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshEmployeeTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(204, Short.MAX_VALUE)
                .addComponent(addEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(refreshEmployeeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshEmployeeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tempPanelLayout = new javax.swing.GroupLayout(tempPanel);
        tempPanel.setLayout(tempPanelLayout);
        tempPanelLayout.setHorizontalGroup(
            tempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tempPanelLayout.setVerticalGroup(
            tempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout employeePanelLayout = new javax.swing.GroupLayout(employeePanel);
        employeePanel.setLayout(employeePanelLayout);
        employeePanelLayout.setHorizontalGroup(
            employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1100, Short.MAX_VALUE)
            .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tempPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        employeePanelLayout.setVerticalGroup(
            employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
            .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(employeePanelLayout.createSequentialGroup()
                    .addComponent(tempPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        addCustomer.setBackground(new java.awt.Color(255, 255, 255));
        addCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addCustomer.setText("Thêm khách hàng");
        addCustomer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addCustomer.setOpaque(true);
        addCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCustomerMouseClicked(evt);
            }
        });

        deleteCustomer.setBackground(new java.awt.Color(255, 255, 255));
        deleteCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove.png"))); // NOI18N
        deleteCustomer.setText("Xóa khách hàng");
        deleteCustomer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteCustomer.setOpaque(true);
        deleteCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteCustomerMouseClicked(evt);
            }
        });

        updateCustomer.setBackground(new java.awt.Color(255, 255, 255));
        updateCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fix.png"))); // NOI18N
        updateCustomer.setText("Cập nhật khách hàng");
        updateCustomer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateCustomer.setOpaque(true);
        updateCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateCustomerMouseClicked(evt);
            }
        });

        refreshCustomerTable.setBackground(new java.awt.Color(255, 255, 255));
        refreshCustomerTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refreshCustomerTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refreshCustomerTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        refreshCustomerTable.setText("Làm mới");
        refreshCustomerTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshCustomerTable.setOpaque(true);
        refreshCustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshCustomerTableMouseClicked(evt);
            }
        });

        customerTable.setAutoCreateRowSorter(true);
        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã KH", "Tên", "SĐT", "Địa chỉ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerTable.setGridColor(new java.awt.Color(0, 0, 0));
        customerTable.setOpaque(false);
        jScrollPane6.setViewportView(customerTable);
        if (customerTable.getColumnModel().getColumnCount() > 0) {
            customerTable.getColumnModel().getColumn(2).setMinWidth(120);
            customerTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            customerTable.getColumnModel().getColumn(2).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(212, Short.MAX_VALUE)
                .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshCustomerTable, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshCustomerTable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        accountTable.setAutoCreateRowSorter(true);
        accountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tài khoản", "Mật khẩu", "Loại tài khoản", "Mã NV", "Lưu?", "Khả dụng?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountTable.setGridColor(new java.awt.Color(0, 0, 0));
        accountTable.setOpaque(false);
        jScrollPane7.setViewportView(accountTable);
        if (accountTable.getColumnModel().getColumnCount() > 0) {
            accountTable.getColumnModel().getColumn(3).setMinWidth(80);
            accountTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            accountTable.getColumnModel().getColumn(3).setMaxWidth(80);
            accountTable.getColumnModel().getColumn(4).setMinWidth(60);
            accountTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            accountTable.getColumnModel().getColumn(4).setMaxWidth(60);
            accountTable.getColumnModel().getColumn(5).setMinWidth(60);
            accountTable.getColumnModel().getColumn(5).setPreferredWidth(60);
            accountTable.getColumnModel().getColumn(5).setMaxWidth(60);
        }

        updateAccount.setBackground(new java.awt.Color(255, 255, 255));
        updateAccount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateAccount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fix.png"))); // NOI18N
        updateAccount.setText("Cập nhật tài khoản");
        updateAccount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateAccount.setOpaque(true);
        updateAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateAccountMouseClicked(evt);
            }
        });

        refreshAccountTable.setBackground(new java.awt.Color(255, 255, 255));
        refreshAccountTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refreshAccountTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refreshAccountTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updated.png"))); // NOI18N
        refreshAccountTable.setText("Làm mới");
        refreshAccountTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        refreshAccountTable.setOpaque(true);
        refreshAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshAccountTableMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(344, Short.MAX_VALUE)
                .addComponent(updateAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(refreshAccountTable, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(450, 450, 450))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshAccountTable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout accountPanelLayout = new javax.swing.GroupLayout(accountPanel);
        accountPanel.setLayout(accountPanelLayout);
        accountPanelLayout.setHorizontalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7)
            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        accountPanelLayout.setVerticalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(sellPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(bookPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(billPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(employeePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(customerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(accountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(sellPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(bookPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(billPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(employeePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(customerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(accountPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(navBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(navBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    JPanel menuPanel[] = new JPanel[7];
    JPanel mainPanel[] = new JPanel[8];
//------------------------------------------------------------------------------ API------------------------------------------------------------------------------

    private void addAllPanelAndLoadData() {

        // Menu 
        menuPanel[0] = sellManagement;
        menuPanel[1] = bookManagement;
        menuPanel[2] = categoryManagement;
        menuPanel[3] = billManagement;
        menuPanel[4] = employeeManagement;
        menuPanel[5] = customerManagement;
        menuPanel[6] = accountManagement;

        // Main screen
        mainPanel[0] = sellPanel;
        mainPanel[1] = bookPanel;
        mainPanel[2] = categoryPanel;
        mainPanel[3] = billPanel;
        mainPanel[4] = employeePanel;
        mainPanel[5] = customerPanel;
        mainPanel[6] = accountPanel;
        mainPanel[7] = homePanel;

        for (JPanel jp : mainPanel) {
            if (jp != homePanel) {
                jp.setVisible(false);
            }
        }
    }

    private void UIManagement(JPanel menu, JPanel main) {
        if (!currentUser.equals("root") && menu == accountManagement && main == accountPanel) {
            JOptionPane.showMessageDialog(rootPane, "Bạn không có quyền xem account panel!!");
        } else {
            for (JPanel jp : menuPanel) {
                if (jp == menu) {
                    jp.setBackground(new Color(153, 153, 153));
                } else {
                    jp.setBackground(new Color(51, 51, 51));
                }
            }
            for (JPanel jp : mainPanel) {
                if (jp == main) {
                    jp.setVisible(true);
                } else {
                    jp.setVisible(false);
                }
            }
        }
    }

    public void setEmployeeName(String name) {
        employeeName.setText(name);
        welcomeEmployee.setText("Welcome back " + name);
    }

    public void setUser(String user) {
        this.currentUser = user;
        for (NhanVien nv : qlnv.dsnv) {
            if (currentUser.equals("root")) {
                billEmployee.setText("Main admin: Tuấn Lộc-NV00");
                break;
            } else if (nv.getMaNV().equalsIgnoreCase(this.currentUser)) {
                billEmployee.setText("Nhân viên: " + nv.getTen() + "-" + this.currentUser);
                break;
            }
        }
    }

    private static String removeVietnameseTones(String s) {
        s = s.replaceAll("á|à|ả|ã|ạ|â|ấ|ầ|ẫ|ẫ|ậ|ă|ắ|ằ|ẳ|ẵ|ặ", "a");
        s = s.replaceAll("é|è|ẻ|ẽ|ẽ|ê|ế|ề|ể|ễ|ệ", "e");
        s = s.replaceAll("ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự", "u");
        s = s.replaceAll("ó|ò|ỏ|õ|ọ|ơ|ớ|ờ|ở|ỡ|ợ|ô|ố|ồ|ổ|ỗ|ộ", "o");
        s = s.replaceAll("í|ì|ỉ|ĩ|ị", "i");
        s = s.replaceAll("ý|ỳ|ỷ|ỹ|ỵ", "y");
        s = s.replaceAll("đ", "d");
        return s;
    }

    private static String toMoney(int d) {
        String s = String.valueOf(d);
        if (s.indexOf(".") != -1) {
            s = s.substring(0, s.indexOf("."));
        }

        return toMoney(s);
    }

    private static String toMoney(String s) {
        int odd = s.length() % 3;

        String s2 = s.substring(0, odd);

        int length = s.length() / 3;
        for (int i = 0; i < length; i++) {
            s2 += " " + s.substring(odd + i * 3, odd + i * 3 + 3);
        }

        return s2.trim() + "đ";
    }

    private static String toDiscount(float f) {
        String s = String.valueOf(Math.floor(f * 100)) + "%";
        return s;
    }

    private boolean onlyNumber(String s) {
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))) {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chỉ nhập số!!");
                return false;
            }
        }
        return true;
    }

//------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------Xử lý sự kiện chung ( đăng xuất , thoát chương trình , đổi màu trên menuMangament và setVisible của mainPanel)-------------------

    private void sellManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sellManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(sellManagement, sellPanel);
    }//GEN-LAST:event_sellManagementMouseClicked

    private void bookManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(bookManagement, bookPanel);
    }//GEN-LAST:event_bookManagementMouseClicked

    private void employeeNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeNameMouseClicked
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(getRootPane(),
                "Bạn có chắc muốn đăng xuất không?", "Xác nhận",
                JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            new DangNhap().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeeNameMouseClicked

    private void exitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabelMouseClicked
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(getRootPane(),
                "Bạn có chắc muốn thoát chương trình không?", "Xác nhận",
                JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitLabelMouseClicked

    private void categoryManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(categoryManagement, categoryPanel);
    }//GEN-LAST:event_categoryManagementMouseClicked

    private void billManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(billManagement, billPanel);
    }//GEN-LAST:event_billManagementMouseClicked

    private void employeeManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(employeeManagement, employeePanel);
    }//GEN-LAST:event_employeeManagementMouseClicked

    private void customerManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(customerManagement, customerPanel);
    }//GEN-LAST:event_customerManagementMouseClicked

    private void accountManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountManagementMouseClicked
        // TODO add your handling code here:
        UIManagement(accountManagement, accountPanel);
    }//GEN-LAST:event_accountManagementMouseClicked

//------------------------------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------- Main-SELLPANEL ----------------------------------------------------------------------------
    private void LoadDataToAllComboBox() {

        // Authors combobox
        List<String> authors = new LinkedList<>();
        authors.add("author");
        Map<String, List<Object>> rs = new HashMap<>();
        qlsp.selectData(null, null, authors, rs, true);
        for (String key : rs.keySet()) {
            List<Object> records = rs.get(key);
            for (Object record : records) {
                authorsComboBox.addItem((String) record);
                bookAuthorsComboBox.addItem((String) record);
            }
        }

        // Categories combobox
        qltl.dslsp.forEach((tl) -> {
            categoriesComboBox.addItem(tl.getTenTL());
            bookCategoriesComboBox.addItem(tl.getTenTL());
        });

        // Customers combobox
        qlkh.dskh.forEach((kh) -> {
            customersComboBox.addItem(kh.getTen() + " - " + kh.getMaKH());
        });

    }

    private void showSellProduct() {
        sellProductModel = (DefaultTableModel) sellProductTable.getModel();
        billProductModel = (DefaultTableModel) billProductTable.getModel();

        sellProductModel.setRowCount(0);
        qlsp.readDB();

        for (SanPham sp : qlsp.dssp) {
            sellProductModel.addRow(new Object[]{
                sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
            });
        }
    }

    private void refreshCustomerComboBox() {
        customersComboBox.removeAllItems();
        qlkh.readDB();

        qlkh.dskh.forEach((kh) -> {
            customersComboBox.addItem(kh.getTen() + " - " + kh.getMaKH());
        });
    }

    private void sellSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellSearchFieldKeyReleased
        // TODO add your handling code here:
        String search = removeVietnameseTones(sellSearchField.getText().toLowerCase());
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        if (authorsComboBox.getSelectedIndex() != 0 || categoriesComboBox.getSelectedIndex() != 0) {
            if (search.equals("")) {
                priceFrom.setFocusable(true);
                priceTo.setFocusable(true);
                if (authorsComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByAuthors((String) authorsComboBox.getSelectedItem(), sellProductModel);
                } else if (categoriesComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByCategories((String) categoriesComboBox.getSelectedItem(), sellProductModel);
                }
            } else {
                priceFrom.setFocusable(false);
                priceTo.setFocusable(false);
                if (authorsComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByAuthors((String) authorsComboBox.getSelectedItem(), sellProductModel);
                } else if (categoriesComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByCategories((String) categoriesComboBox.getSelectedItem(), sellProductModel);
                }
                for (int i = 0; i < sellProductTable.getRowCount(); i++) {
                    for (int j = 0; j < sellProductTable.getColumnCount(); j++) {
                        if (removeVietnameseTones(String.valueOf(sellProductTable.getValueAt(i, j)).toLowerCase()).contains(search)) {

                            List<Object> temp = new LinkedList<>();
                            temp.add(sellProductTable.getValueAt(i, 0));
                            temp.add(sellProductTable.getValueAt(i, 1));
                            temp.add(sellProductTable.getValueAt(i, 2));
                            temp.add(sellProductTable.getValueAt(i, 3));
                            temp.add(sellProductTable.getValueAt(i, 4));

                            result.put(count, temp);
                            count++;
                            break;
                        }
                    }
                }

                if (!result.isEmpty()) {
                    sellProductModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        sellProductModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), records.get(3), records.get(4)
                        });
                    }
                }
            }
            if (!search.equals("") && result.isEmpty()) {
                sellProductModel.setRowCount(0);
            }
        } else {
            if (search.equals("")) {
                priceFrom.setFocusable(true);
                priceTo.setFocusable(true);
                showSellProduct();
            } else {
                priceFrom.setFocusable(false);
                priceTo.setFocusable(false);
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getMaSP().toLowerCase().contains(search)
                            || removeVietnameseTones(sp.getTen().toLowerCase()).contains(search)
                            || removeVietnameseTones(sp.getTheLoai().toLowerCase()).contains(search)
                            || toMoney(sp.getGia()).contains(search)
                            || String.valueOf(sp.getSoLuong()).contains(search)) {

                        List<Object> temp = new LinkedList<>();
                        temp.add(sp.getMaSP());
                        temp.add(sp.getTen());
                        temp.add(sp.getTheLoai());
                        temp.add(sp.getGia());
                        temp.add(sp.getSoLuong());

                        result.put(count, temp);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    sellProductModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        sellProductModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), toMoney((Integer) records.get(3)), records.get(4)
                        });
                    }
                }
            }
            if (!search.equals("") && result.isEmpty()) {
                sellProductModel.setRowCount(0);
            }
        }
    }//GEN-LAST:event_sellSearchFieldKeyReleased

    private void sellProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sellProductTableMouseClicked
        // TODO add your handling code here:
        int num = sellProductTable.getSelectedRow();
        if (num > -1) {
            List<Object> cData = new LinkedList<>();
            cData.add(sellProductTable.getValueAt(num, 0));
            List<String> cColumn = new LinkedList<>();
            cColumn.add("id");
            List<String> sColumn = new LinkedList<>();
            sColumn.add("url");
            String src = qlsp.getSingleData(cData, cColumn, sColumn, false);

            productImg.setIcon(new ImageIcon(new ImageIcon(src).getImage().getScaledInstance(productImg.getWidth(), productImg.getHeight(), Image.SCALE_FAST)));
            detailProductID.setText((String) sellProductTable.getValueAt(num, 0));
            detailProductName.setText((String) sellProductTable.getValueAt(num, 1));
            detailCategoryID.setText((String) sellProductTable.getValueAt(num, 2));
            quantity.setText("1");
        }
    }//GEN-LAST:event_sellProductTableMouseClicked

    private void addToBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBillActionPerformed
        // TODO add your handling code here:
        int row = sellProductTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một sản phẩm!!");
        } else {
            if (Integer.parseInt(quantity.getText()) > (int) sellProductTable.getValueAt(row, 4)) {
                JOptionPane.showMessageDialog(rootPane, "Số lượng vượt tồn kho!!");
                quantity.setText("1");
                quantity.requestFocus();
            } else {
                if (Integer.parseInt(quantity.getText()) <= 0) {
                    JOptionPane.showMessageDialog(rootPane, "Số lượng sản phẩm phải lớn hơn hoặc bằng 1!!");
                    quantity.setText("1");
                    quantity.requestFocus();
                } else {
                    int qty = (int) sellProductTable.getValueAt(row, 4) - Integer.parseInt(quantity.getText());
                    sellProductTable.setValueAt(qty, row, 4);
                    for (SanPham sp : qlsp.dssp) {
                        if (sp.getMaSP().equals(sellProductTable.getValueAt(row, 0))) {
                            int total = Integer.parseInt(quantity.getText()) * (int) (sp.getGia() * (1 - sp.getGiamGia()));
                            if (billProductModel.getRowCount() > 0) {
                                boolean temp = false;
                                for (int i = 0; i < billProductTable.getRowCount(); i++) {
                                    if (sellProductTable.getValueAt(row, 0).equals(billProductTable.getValueAt(i, 1))) {
                                        int newQty = (int) billProductTable.getValueAt(i, 4) + Integer.parseInt(quantity.getText());
                                        billProductTable.setValueAt(newQty, i, 4);
                                        int total2 = (int) billProductTable.getValueAt(i, 4) * (int) (sp.getGia() * (1 - sp.getGiamGia()));
                                        billProductTable.setValueAt(toMoney(total2), i, 6);
                                        temp = true;
                                        break;
                                    }
                                }
                                if (temp == false) {
                                    billProductModel.addRow(new Object[]{
                                        (int) billProductTable.getValueAt(billProductTable.getRowCount() - 1, 0) + 1, sp.getMaSP(), sp.getTen(), toMoney(sp.getGia()), Integer.parseInt(quantity.getText()), toDiscount(sp.getGiamGia()), toMoney(total)
                                    });
                                }
                            } else {
                                billProductModel.addRow(new Object[]{
                                    1, sp.getMaSP(), sp.getTen(), toMoney(sp.getGia()), Integer.parseInt(quantity.getText()), toDiscount(sp.getGiamGia()), toMoney(total)
                                });
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_addToBillActionPerformed

    private void quantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityKeyReleased
        // TODO add your handling code here:
        if (sellProductTable.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một trường!!");
            quantity.setText("");
        } else {
            if (!onlyNumber(quantity.getText())) {
                quantity.setText("");
            }
        }
    }//GEN-LAST:event_quantityKeyReleased

    private void authorsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorsComboBoxActionPerformed
        // TODO add your handling code here:
        if (authorsComboBox.getSelectedIndex() != 0) {
            sellProductModel.setRowCount(0);
            setProductTableSortByAuthors((String) authorsComboBox.getSelectedItem(), sellProductModel);
            categoriesComboBox.setEnabled(false);
        } else {
            categoriesComboBox.setEnabled(true);
            showSellProduct();
        }
    }//GEN-LAST:event_authorsComboBoxActionPerformed

    private void setProductTableSortByAuthors(String s, DefaultTableModel t) {
        for (SanPham sp : qlsp.dssp) {
            if (sp.getTacGia().equalsIgnoreCase(s)) {
                t.addRow(new Object[]{
                    sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                });
            }
        }
    }

    private void setProductTableSortByCategories(String s, DefaultTableModel t) {
        switch (s) {
            case "Khoa học": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("khoa_hoc")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
            case "Kỹ năng sống": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("ky_nang_song")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
            case "Tiểu thuyết": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("tieu_thuyet")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
            case "Ngôn tình": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("ngon_tinh")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
            case "Manga": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("manga")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
            case "Ngoại ngữ": {
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equalsIgnoreCase("ngoai_ngu")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTheLoai(), toMoney(sp.getGia()), sp.getSoLuong()
                        });
                    }
                }
            }
            break;
        }
    }

    private void setSellProductTableSortByPrice() {
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        int from = 0;
        String s1 = priceFrom.getText().replaceAll("\\s+", "");
        String s2 = priceTo.getText().replaceAll("\\s+", "");
        if (authorsComboBox.getSelectedIndex() != 0 || categoriesComboBox.getSelectedIndex() != 0) {
            if (s2.equals("")) {
                sellSearchField.setFocusable(true);
                if (authorsComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByAuthors((String) authorsComboBox.getSelectedItem(), sellProductModel);
                } else if (categoriesComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByCategories((String) categoriesComboBox.getSelectedItem(), sellProductModel);
                }
            } else {
                sellSearchField.setFocusable(false);
                if (authorsComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByAuthors((String) authorsComboBox.getSelectedItem(), sellProductModel);
                } else if (categoriesComboBox.getSelectedIndex() != 0) {
                    sellProductModel.setRowCount(0);
                    setProductTableSortByCategories((String) categoriesComboBox.getSelectedItem(), sellProductModel);
                }
                if (!s1.equals("")) {
                    from = Integer.parseInt(s1);
                }
                for (int i = 0; i < sellProductTable.getRowCount(); i++) {

                    String temp = (String) sellProductTable.getValueAt(i, 3);
                    temp = temp.substring(0, temp.length() - 1);
                    temp = temp.replaceAll("\\s+", "");

                    if (Integer.parseInt(temp) >= from && Integer.parseInt(temp) <= Integer.parseInt(s2)) {
                        List<Object> temp1 = new LinkedList<>();
                        temp1.add(sellProductTable.getValueAt(i, 0));
                        temp1.add(sellProductTable.getValueAt(i, 1));
                        temp1.add(sellProductTable.getValueAt(i, 2));
                        temp1.add(Integer.parseInt(temp));
                        temp1.add(sellProductTable.getValueAt(i, 4));

                        result.put(count, temp1);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    sellProductModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        sellProductModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), toMoney((int) records.get(3)), records.get(4)
                        });
                    }
                }
            }
            if (!s2.equals("") && result.isEmpty()) {
                sellProductModel.setRowCount(0);
            }
        } else {
            if (s2.equals("")) {
                sellSearchField.setFocusable(true);
                sellProductModel.setRowCount(0);
                showSellProduct();
            } else {
                sellSearchField.setFocusable(false);
                if (!s1.equals("")) {
                    from = Integer.parseInt(s1);
                }
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getGia() >= from && sp.getGia() <= Integer.parseInt(s2)) {
                        List<Object> temp = new LinkedList<>();
                        temp.add(sp.getMaSP());
                        temp.add(sp.getTen());
                        temp.add(sp.getTheLoai());
                        temp.add(sp.getGia());
                        temp.add(sp.getSoLuong());

                        result.put(count, temp);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    sellProductModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        sellProductModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), toMoney((int) records.get(3)), records.get(4)
                        });
                    }
                }
            }
        }
        if (!s2.equals("") && result.isEmpty()) {
            sellProductModel.setRowCount(0);
        }
    }

    private void setBillID() {
        if (qlhd.dshd.isEmpty()) {
            billID.setText("Mã HĐ: HD1");
        } else {
            int highest = 0;
            for (HoaDon hd : qlhd.dshd) {
                int nextID = Integer.parseInt(hd.getMaHD().substring(2));
                if (nextID >= highest) {
                    highest = nextID + 1;
                }
            }
            billID.setText("Mã HĐ: HD" + highest);
        }
        billTotalPrice.setText("Tổng cộng: 0đ");
    }

    private void categoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboBoxActionPerformed
        // TODO add your handling code here:
        if (categoriesComboBox.getSelectedIndex() != 0) {
            sellProductModel.setRowCount(0);
            setProductTableSortByCategories((String) categoriesComboBox.getSelectedItem(), sellProductModel);
            authorsComboBox.setEnabled(false);
        } else {
            authorsComboBox.setEnabled(true);
            showSellProduct();
        }
    }//GEN-LAST:event_categoriesComboBoxActionPerformed

    private void billDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billDetailMouseClicked
        // TODO add your handling code here:
        int row = sellProductTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một quyển sách để xem chi tiết!!");
        } else {
            for (SanPham sp : qlsp.dssp) {
                if (sp.getMaSP().equals(sellProductTable.getValueAt(row, 0))) {
                    ChiTietSach detail = new ChiTietSach();
                    detail.setVisible(true);
                    detail.setLocationRelativeTo(null);
                    detail.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    detail.setBookDetail(sp.getUrl(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(),
                            sp.getNgayPH(), sp.getChiTiet(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(),
                            sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH());
                    break;
                }
            }
        }
    }//GEN-LAST:event_billDetailMouseClicked

    private void removeProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeProductMouseClicked
        // TODO add your handling code here:
        int row = billProductTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một sản phẩm trong hóa đơn để xóa!!");
        } else {
            int reply = JOptionPane.showConfirmDialog(getRootPane(),
                    "Bạn có chắc muốn xóa sản phẩm khỏi đơn hàng không?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                for (int i = 0; i < sellProductTable.getRowCount(); i++) {
                    if (billProductTable.getValueAt(row, 1).equals(sellProductTable.getValueAt(i, 0))) {
                        int qty = (int) sellProductTable.getValueAt(i, 4) + (int) billProductTable.getValueAt(row, 4);
                        sellProductTable.setValueAt(qty, i, 4);
                        break;
                    }
                }
                billProductModel.removeRow(row);
                for (int i = 1; i <= billProductTable.getRowCount(); i++) {
                    billProductTable.setValueAt(i, (i - 1), 0);
                }
            }
        }
    }//GEN-LAST:event_removeProductMouseClicked

    private void priceToKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceToKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(priceTo.getText())) {
            priceTo.setText("");
        } else {
            setSellProductTableSortByPrice();
        }
    }//GEN-LAST:event_priceToKeyReleased

    private void priceFromKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceFromKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(priceFrom.getText())) {
            priceFrom.setText("");
        } else {
            setSellProductTableSortByPrice();
        }
    }//GEN-LAST:event_priceFromKeyReleased

    private void cancelBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBillMouseClicked
        // TODO add your handling code here:
        if (billProductTable.getRowCount() < 1) {
            JOptionPane.showMessageDialog(rootPane, "Đơn hàng rỗng không thể hủy!!");
        } else {
            int reply = JOptionPane.showConfirmDialog(getRootPane(),
                    "Bạn có chắc muốn hủy hóa đơn không?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                for (int i = 0; i < billProductTable.getRowCount(); i++) {
                    for (int j = 0; j < sellProductTable.getRowCount(); j++) {
                        if (billProductTable.getValueAt(i, 1).equals(sellProductTable.getValueAt(j, 0))) {
                            int qty = (int) sellProductTable.getValueAt(j, 4) + (int) billProductTable.getValueAt(i, 4);
                            sellProductTable.setValueAt(qty, j, 4);
                            break;
                        }
                    }
                }
                billProductModel.setRowCount(0);
            }
        }
    }//GEN-LAST:event_cancelBillMouseClicked

    private void payBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_payBillMouseClicked
        // TODO add your handling code here:
        if (billProductTable.getRowCount() < 1) {
            JOptionPane.showMessageDialog(rootPane, "Đơn hàng rỗng không thể thanh toán!!");
        } else {
            if (customersComboBox.getSelectedIndex() < 1) {
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một khách hàng!!");
                customersComboBox.requestFocus();
            } else {
                int reply = JOptionPane.showConfirmDialog(getRootPane(),
                        "Bạn có chắc muốn thanh toán không?", "Xác nhận",
                        JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    List<Object> addData = new LinkedList<>();
                    String maHD = billID.getText().substring(7);
                    String maKH = "";
                    int index = 1;
                    for (KhachHang kh : qlkh.dskh) {
                        if (index == customersComboBox.getSelectedIndex()) {
                            maKH = kh.getMaKH();
                            break;
                        } else {
                            index++;
                        }
                    }
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
                    LocalDateTime now = LocalDateTime.now();
                    String dateTime[] = String.valueOf(dtf.format(now)).split(" ", 2);
                    String ngayLap = dateTime[0];
                    String gioLap = dateTime[1];
                    int tong = 0;
                    String temp = billTotalPrice.getText().substring(11);
                    temp = temp.replaceAll("\\s+", "");
                    temp = temp.substring(0, temp.length() - 1);
                    tong = Integer.parseInt(temp);

                    addData.add(maHD);
                    addData.add(currentUser);
                    addData.add(maKH);
                    addData.add(ngayLap);
                    addData.add(gioLap);
                    addData.add(tong);

                    List<String> columns = qlhd.getColumns();
                    int check = qlhd.Add(addData, columns);
                    if (check == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Thanh toán thành công!!");
                        showBillTable();

                        for (int i = 0; i < billProductTable.getRowCount(); i++) {
                            for (SanPham sp : qlsp.dssp) {
                                if (sp.getMaSP().equals(billProductTable.getValueAt(i, 1))) {
                                    int newStock = sp.getSoLuong() - (int) billProductTable.getValueAt(i, 4);
                                    List<Object> dataSet = new LinkedList<>();
                                    dataSet.add(newStock);
                                    dataSet.add(sp.getMaSP());
                                    List<String> updateC = new LinkedList<>();
                                    updateC.add("stock");
                                    List<String> conditionC = new LinkedList<>();
                                    conditionC.add("id");
                                    int checkUpdate = qlsp.Update(dataSet, updateC, conditionC);
                                    if (checkUpdate == 1) {
                                        showSellProduct();
                                        showBookTable();
                                    } else if (checkUpdate == 2) {
                                        JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình update lại số lượng!!");
                                    } else {
                                        JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình update lại số lượng!!");
                                    }
                                    break;
                                }
                            }
                        }

                        for (int i = 0; i < billProductTable.getRowCount(); i++) {
                            String maSP = (String) billProductTable.getValueAt(i, 1);
                            int soLuong = (int) billProductTable.getValueAt(i, 4);
                            String tempPrice = (String) billProductTable.getValueAt(i, 3);
                            int donGia = Integer.parseInt(tempPrice.substring(0, tempPrice.length() - 1).replaceAll("\\s+", ""));
                            String tempTotal = (String) billProductTable.getValueAt(i, 6);
                            int thanhTien = Integer.parseInt(tempTotal.substring(0, tempTotal.length() - 1).replaceAll("\\s+", ""));

                            List<Object> dataSet = new LinkedList<>();
                            dataSet.add(maHD);
                            dataSet.add(maSP);
                            dataSet.add(soLuong);
                            dataSet.add(donGia);
                            dataSet.add(thanhTien);
                            List<String> billDetailColumns = qlcthd.getColumns();

                            int checkAddToBillDetail = qlcthd.Add(dataSet, billDetailColumns);
                            if (checkAddToBillDetail == 2) {
                                JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình thêm vào billdetail!!");
                            } else if (checkAddToBillDetail == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình thêm vào billdetail!!");
                            }
                        }

                        showSellProduct();
                        billProductModel.setRowCount(0);
                        customersComboBox.setSelectedIndex(0);
                        setBillID();
                    } else if (check == 2) {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình thanh toán hóa đơn!!");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình thanh toán hóa đơn!!");
                    }
                }
            }
        }
    }//GEN-LAST:event_payBillMouseClicked

    private void setTotalPrice() {
        billProductModel.addTableModelListener((TableModelEvent e) -> {
            if (e.getType() == TableModelEvent.INSERT || e.getType() == TableModelEvent.DELETE || e.getType() == TableModelEvent.UPDATE) {
                int total = 0;
                for (int i = 0; i < billProductTable.getRowCount(); i++) {
                    String temp = (String) billProductTable.getValueAt(i, 6);
                    temp = temp.substring(0, temp.length() - 1);
                    temp = temp.replaceAll("\\s+", "");
                    total += Integer.parseInt(temp);
                }
                billTotalPrice.setText("Tổng cộng: " + toMoney(total));
            }
        });
    }

//---------------------------------------------------------------- Main-BOOKPANEL ----------------------------------------------------------------------------    

    private void bookCategoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookCategoriesComboBoxActionPerformed
        // TODO add your handling code here:
        if (bookCategoriesComboBox.getSelectedIndex() != 0) {
            bookModel.setRowCount(0);
            setBookTableSortByCategories((String) bookCategoriesComboBox.getSelectedItem(), bookModel);
            bookAuthorsComboBox.setEnabled(false);
        } else {
            bookAuthorsComboBox.setEnabled(true);
            showBookTable();
        }

    }//GEN-LAST:event_bookCategoriesComboBoxActionPerformed

    private void bookAuthorsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAuthorsComboBoxActionPerformed
        // TODO add your handling code here:
        if (bookAuthorsComboBox.getSelectedIndex() != 0) {
            bookModel.setRowCount(0);
            setBookTableSortByAuthors((String) bookAuthorsComboBox.getSelectedItem(), bookModel);
            bookCategoriesComboBox.setEnabled(false);
        } else {
            bookCategoriesComboBox.setEnabled(true);
            showBookTable();
        }
    }//GEN-LAST:event_bookAuthorsComboBoxActionPerformed

    private void bookSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookSearchFieldKeyReleased
        // TODO add your handling code here:
        String search = removeVietnameseTones(bookSearchField.getText().toLowerCase());
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        if (bookAuthorsComboBox.getSelectedIndex() != 0 || bookCategoriesComboBox.getSelectedIndex() != 0) {
            if (search.equals("")) {
                bookPriceFrom.setFocusable(true);
                bookPriceTo.setFocusable(true);
                if (bookAuthorsComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByAuthors((String) bookAuthorsComboBox.getSelectedItem(), bookModel);
                } else if (bookCategoriesComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByCategories((String) bookCategoriesComboBox.getSelectedItem(), bookModel);
                }
            } else {
                bookPriceFrom.setFocusable(false);
                bookPriceTo.setFocusable(false);
                if (bookAuthorsComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByAuthors((String) bookAuthorsComboBox.getSelectedItem(), bookModel);
                } else if (bookCategoriesComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByCategories((String) bookCategoriesComboBox.getSelectedItem(), bookModel);
                }
                for (int i = 0; i < bookTable.getRowCount(); i++) {
                    for (int j = 0; j < bookTable.getColumnCount(); j++) {
                        if (removeVietnameseTones(String.valueOf(bookTable.getValueAt(i, j)).toLowerCase()).contains(search)) {

                            List<Object> temp = new LinkedList<>();
                            temp.add(bookTable.getValueAt(i, 0));
                            temp.add(bookTable.getValueAt(i, 1));
                            temp.add(bookTable.getValueAt(i, 2));
                            temp.add(bookTable.getValueAt(i, 3));
                            temp.add(bookTable.getValueAt(i, 4));
                            temp.add(bookTable.getValueAt(i, 5));
                            temp.add(bookTable.getValueAt(i, 6));
                            temp.add(bookTable.getValueAt(i, 7));
                            temp.add(bookTable.getValueAt(i, 8));
                            temp.add(bookTable.getValueAt(i, 9));
                            temp.add(bookTable.getValueAt(i, 10));
                            temp.add(bookTable.getValueAt(i, 11));
                            temp.add(bookTable.getValueAt(i, 12));
                            temp.add(bookTable.getValueAt(i, 13));

                            result.put(count, temp);
                            count++;
                            break;
                        }
                    }
                }

                if (!result.isEmpty()) {
                    bookModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        bookModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), records.get(5), records.get(6),
                            records.get(7), records.get(8), records.get(9), records.get(10), records.get(11), records.get(12), records.get(13)
                        });
                    }
                }
            }
            if (!search.equals("") && result.isEmpty()) {
                bookModel.setRowCount(0);
            }
        } else {
            if (search.equals("")) {
                bookPriceFrom.setFocusable(true);
                bookPriceTo.setFocusable(true);
                showBookTable();
            } else {
                bookPriceFrom.setFocusable(false);
                bookPriceTo.setFocusable(false);
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getMaSP().toLowerCase().contains(search)
                            || removeVietnameseTones(sp.getTen().toLowerCase()).contains(search)
                            || removeVietnameseTones(sp.getTheLoai().toLowerCase()).contains(search)
                            || toMoney(sp.getGia()).contains(search)
                            || sp.getKichCo().contains(search)
                            || removeVietnameseTones(sp.getBia().toLowerCase()).contains(search)
                            || removeVietnameseTones(sp.getNgayPH().toLowerCase()).contains(search)
                            || String.valueOf(sp.getGiamGia()).contains(search)
                            || removeVietnameseTones(sp.getNhaXB().toLowerCase()).contains(search)
                            || removeVietnameseTones(sp.getNhaPH().toLowerCase()).contains(search)
                            || removeVietnameseTones(dich.toLowerCase()).contains(search)
                            || String.valueOf(sp.getSoTrang()).contains(search)) {

                        List<Object> temp = new LinkedList<>();
                        temp.add(sp.getMaSP());
                        temp.add(sp.getTen());
                        temp.add(sp.getTacGia());
                        temp.add(sp.getKichCo());
                        temp.add(sp.getTheLoai());
                        temp.add(sp.getBia());
                        temp.add(sp.getNgayPH());
                        temp.add(toDiscount(sp.getGiamGia()));
                        temp.add(sp.getSoLuong());
                        temp.add(sp.getNhaXB());
                        temp.add(sp.getSoTrang());
                        temp.add(toMoney(sp.getGia()));
                        temp.add(sp.getNhaPH());
                        temp.add(dich);

                        result.put(count, temp);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    bookModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        bookModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), records.get(5), records.get(6),
                            records.get(7), records.get(8), records.get(9), records.get(10), records.get(11), records.get(12), records.get(13)
                        });
                    }
                }
            }
            if (!search.equals("") && result.isEmpty()) {
                bookModel.setRowCount(0);
            }
        }
    }//GEN-LAST:event_bookSearchFieldKeyReleased

    private void bookPriceFromKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookPriceFromKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(bookPriceFrom.getText())) {
            bookPriceFrom.setText("");
        } else {
            setBookTableSortByPrice();
        }
    }//GEN-LAST:event_bookPriceFromKeyReleased

    private void bookPriceToKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookPriceToKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(bookPriceTo.getText())) {
            bookPriceTo.setText("");
        } else {
            setBookTableSortByPrice();
        }
    }//GEN-LAST:event_bookPriceToKeyReleased

    private void addBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBookMouseClicked
        // TODO add your handling code here:
        ThemSach addBook = new ThemSach();
        addBook.setTitle("Thêm sách");
        addBook.setVisible(true);
        addBook.setLocationRelativeTo(null);
        for (TheLoai tl : qltl.dslsp) {
            addBook.setCategoryComboBox(tl.getMaTL());
        }
        addBook.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_addBookMouseClicked

    private void updateBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBookMouseClicked
        // TODO add your handling code here:
        int row = bookTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một sản phẩm để cập nhật thông tin!!");
        } else {
            CapNhatSach update = new CapNhatSach();
            update.setTitle("Cập nhật sản phẩm " + bookTable.getValueAt(row, 0));
            update.setVisible(true);
            update.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            update.setMaSp((String) bookTable.getValueAt(row, 0));
            for (TheLoai tl : qltl.dslsp) {
                update.setCategoryComboBox(tl.getMaTL());
            }
            for (SanPham sp : qlsp.dssp) {
                if (sp.getMaSP().equals(bookTable.getValueAt(row, 0))) {
                    update.setSelectedCategory(sp.getTheLoai());
                    update.setAllData(sp.getMaSP(), sp.getKichCo(), sp.getBia(), sp.getTen(), sp.getTacGia(), sp.getNgayPH(),
                            sp.getGiamGia(), sp.getUrl(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), sp.getGia(),
                            sp.getNhaPH(), sp.getDichGia(), sp.getChiTiet());
                }
            }
            update.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_updateBookMouseClicked

    private void deleteBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBookMouseClicked
        // TODO add your handling code here:
        int row = bookTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một sản phẩm để xóa!!");
        } else {
            int reply = JOptionPane.showConfirmDialog(getRootPane(),
                    "Bạn có chắc muốn xoá sản phẩm " + bookTable.getValueAt(row, 0) + " không?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                List<Object> conditionData = new LinkedList<>();
                conditionData.add((String) bookTable.getValueAt(row, 0));
                List<String> conditionColumn = new LinkedList<>();
                conditionColumn.add("id");
                int check = qlsp.Delete(conditionData, conditionColumn);
                if (check == 1) {
                    JOptionPane.showMessageDialog(rootPane, "Xoá sản phẩm thành công!!");
                    showBookTable();
                    showSellProduct();
                } else if (check == 2) {
                    JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình xóa sản phẩm!!");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình xóa sản phẩm!!");
                }
            }
        }
    }//GEN-LAST:event_deleteBookMouseClicked

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        // TODO add your handling code here:
        showBookTable();
        showSellProduct();
    }//GEN-LAST:event_refreshMouseClicked

    private void setBookTableSortByAuthors(String s, DefaultTableModel t) {
        for (SanPham sp : qlsp.dssp) {
            String dich = "";
            if (sp.getDichGia() != null) {
                dich = sp.getDichGia();
            }
            if (sp.getTacGia().equalsIgnoreCase(s)) {
                t.addRow(new Object[]{
                    sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                });
            }
        }
    }

    private void setBookTableSortByCategories(String s, DefaultTableModel t) {
        switch (s) {
            case "Khoa học": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("khoa_hoc")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
            case "Kỹ năng sống": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("ky_nang_song")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
            case "Tiểu thuyết": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("tieu_thuyet")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
            case "Ngôn tình": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("ngon_tinh")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
            case "Manga": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("manga")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
            case "Ngoại ngữ": {
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getTheLoai().equalsIgnoreCase("ngoai_ngu")) {
                        t.addRow(new Object[]{
                            sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), sp.getGiamGia(), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
                        });
                    }
                }
            }
            break;
        }
    }

    private void setBookTableSortByPrice() {
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        int from = 0;
        String s1 = bookPriceFrom.getText().replaceAll("\\s+", "");
        String s2 = bookPriceTo.getText().replaceAll("\\s+", "");
        if (bookAuthorsComboBox.getSelectedIndex() != 0 || bookCategoriesComboBox.getSelectedIndex() != 0) {
            if (s2.equals("")) {
                bookSearchField.setFocusable(true);
                if (bookAuthorsComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByAuthors((String) bookAuthorsComboBox.getSelectedItem(), bookModel);
                } else if (bookCategoriesComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByCategories((String) bookCategoriesComboBox.getSelectedItem(), bookModel);
                }
            } else {
                bookSearchField.setFocusable(false);
                if (bookAuthorsComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByAuthors((String) bookAuthorsComboBox.getSelectedItem(), bookModel);
                } else if (bookCategoriesComboBox.getSelectedIndex() != 0) {
                    bookModel.setRowCount(0);
                    setBookTableSortByCategories((String) bookCategoriesComboBox.getSelectedItem(), bookModel);
                }
                if (!s1.equals("")) {
                    from = Integer.parseInt(s1);
                }
                for (int i = 0; i < bookTable.getRowCount(); i++) {

                    String temp = (String) bookTable.getValueAt(i, 11);
                    temp = temp.substring(0, temp.length() - 1);
                    temp = temp.replaceAll("\\s+", "");

                    if (Integer.parseInt(temp) >= from && Integer.parseInt(temp) <= Integer.parseInt(s2)) {
                        List<Object> temp1 = new LinkedList<>();
                        temp1.add(bookTable.getValueAt(i, 0));
                        temp1.add(bookTable.getValueAt(i, 1));
                        temp1.add(bookTable.getValueAt(i, 2));
                        temp1.add(bookTable.getValueAt(i, 3));
                        temp1.add(bookTable.getValueAt(i, 4));
                        temp1.add(bookTable.getValueAt(i, 5));
                        temp1.add(bookTable.getValueAt(i, 6));
                        temp1.add(bookTable.getValueAt(i, 7));
                        temp1.add(bookTable.getValueAt(i, 8));
                        temp1.add(bookTable.getValueAt(i, 9));
                        temp1.add(bookTable.getValueAt(i, 10));
                        temp1.add(bookTable.getValueAt(i, 11));
                        temp1.add(bookTable.getValueAt(i, 12));
                        temp1.add(bookTable.getValueAt(i, 13));

                        result.put(count, temp1);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    bookModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        bookModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), records.get(5), records.get(6),
                            records.get(7), records.get(8), records.get(9), records.get(10), records.get(11), records.get(12), records.get(13)
                        });
                    }
                }
            }
            if (!s2.equals("") && result.isEmpty()) {
                bookModel.setRowCount(0);
            }
        } else {
            if (s2.equals("")) {
                bookSearchField.setFocusable(true);
                bookModel.setRowCount(0);
                showBookTable();
            } else {
                bookSearchField.setFocusable(false);
                if (!s1.equals("")) {
                    from = Integer.parseInt(s1);
                }
                for (SanPham sp : qlsp.dssp) {
                    String dich = "";
                    if (sp.getDichGia() != null) {
                        dich = sp.getDichGia();
                    }
                    if (sp.getGia() >= from && sp.getGia() <= Integer.parseInt(s2)) {
                        List<Object> temp = new LinkedList<>();
                        temp.add(sp.getMaSP());
                        temp.add(sp.getTen());
                        temp.add(sp.getTacGia());
                        temp.add(sp.getKichCo());
                        temp.add(sp.getTheLoai());
                        temp.add(sp.getBia());
                        temp.add(sp.getNgayPH());
                        temp.add(sp.getGiamGia());
                        temp.add(sp.getSoLuong());
                        temp.add(sp.getNhaXB());
                        temp.add(sp.getSoTrang());
                        temp.add(sp.getGia());
                        temp.add(sp.getNhaPH());
                        temp.add(dich);

                        result.put(count, temp);
                        count++;
                    }
                }
                if (!result.isEmpty()) {
                    bookModel.setRowCount(0);
                    for (int i : result.keySet()) {
                        List<Object> records = result.get(i);
                        bookModel.addRow(new Object[]{
                            records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), records.get(5), records.get(6),
                            records.get(7), records.get(8), records.get(9), records.get(10), records.get(11), records.get(12), records.get(13)
                        });
                    }
                }
            }
        }
        if (!s2.equals("") && result.isEmpty()) {
            bookModel.setRowCount(0);
        }
    }

    private void showBookTable() {
        bookModel = (DefaultTableModel) bookTable.getModel();

        bookModel.setRowCount(0);
        qlsp.readDB();

        for (SanPham sp : qlsp.dssp) {
            String dich = "";
            if (sp.getDichGia() != null) {
                dich = sp.getDichGia();
            }
            bookModel.addRow(new Object[]{
                sp.getMaSP(), sp.getTen(), sp.getTacGia(), sp.getKichCo(), sp.getTheLoai(), sp.getBia(), sp.getNgayPH(), toDiscount(sp.getGiamGia()), sp.getSoLuong(), sp.getNhaXB(), sp.getSoTrang(), toMoney(sp.getGia()), sp.getNhaPH(), dich
            });
        }
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------    
//---------------------------------------------------------------- Main-CATEGORYPANEL ----------------------------------------------------------------------------     
    private void addCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCategoryMouseClicked
        // TODO add your handling code here:
        ThemTheLoai add = new ThemTheLoai();
        add.setVisible(true);
        add.setTitle("Thêm thể loại");
        add.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        add.setLocationRelativeTo(null);
    }//GEN-LAST:event_addCategoryMouseClicked

    private void deleteCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCategoryMouseClicked
        // TODO add your handling code here:
        int row = categoryTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một thể loại để xóa!!");
        } else {
            int reply = JOptionPane.showConfirmDialog(getRootPane(),
                    "Bạn có chắc muốn xoá thể loại " + categoryTable.getValueAt(row, 0) + " không?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                boolean check = false;
                for (SanPham sp : qlsp.dssp) {
                    if (sp.getTheLoai().equals(categoryTable.getValueAt(row, 0))) {
                        check = true;
                        break;
                    }
                }
                if (check == true) {
                    JOptionPane.showMessageDialog(rootPane, "Không thể xóa thể loại " + categoryTable.getValueAt(row, 0) + " do vẫn còn sản phẩm thuộc thể loại này");
                } else {
                    List<Object> conditionData = new LinkedList<>();
                    conditionData.add(categoryTable.getValueAt(row, 0));
                    List<String> cColumn = new LinkedList<>();
                    cColumn.add("categoryID");
                    int check2 = qltl.Delete(conditionData, cColumn);
                    if (check2 == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Xóa thành công!!");
                        showCategoryTable();
                    } else if (check2 == 2) {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình xóa thể loại!!");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình xóa thể loại!!");
                    }
                }
            }
        }
    }//GEN-LAST:event_deleteCategoryMouseClicked

    private void updateCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryMouseClicked
        // TODO add your handling code here:
        int row = categoryTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một thể loại để cập nhật!!");
        } else {
            CapNhatTheLoai update = new CapNhatTheLoai();
            update.setVisible(true);
            update.setTitle("Cập nhật thể loại " + categoryTable.getValueAt(row, 0));
            update.setLocationRelativeTo(null);
            update.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            update.setData((String) categoryTable.getValueAt(row, 0), (String) categoryTable.getValueAt(row, 1));
            update.setMaTL((String) categoryTable.getValueAt(row, 0));
        }
    }//GEN-LAST:event_updateCategoryMouseClicked

    private void refreshCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryMouseClicked
        // TODO add your handling code here:
        showCategoryTable();
    }//GEN-LAST:event_refreshCategoryMouseClicked

    private void showCategoryTable() {
        categoryModel = (DefaultTableModel) categoryTable.getModel();

        categoryModel.setRowCount(0);
        qltl.readDB();

        for (TheLoai sp : qltl.dslsp) {
            categoryModel.addRow(new Object[]{
                sp.getMaTL(), sp.getTenTL()
            });
        }
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------    
//---------------------------------------------------------------- Main-BILLPANEL ----------------------------------------------------------------------

    private void watchBillDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watchBillDetailMouseClicked
        // TODO add your handling code here:
        int row = billTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một hóa đơn để xem chi tiết!!");
        } else {
            XemChiTietHoaDon wDetail = new XemChiTietHoaDon();
            wDetail.setVisible(true);
            wDetail.setBillDetailTable((String) billTable.getValueAt(row, 0));
            wDetail.setTitle("Chi tiết hóa đơn " + billTable.getValueAt(row, 0));
            wDetail.setLocationRelativeTo(null);
            wDetail.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_watchBillDetailMouseClicked

    private void billSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billSearchFieldKeyReleased
        // TODO add your handling code here:
        String header = (String) billHeadersComboBox.getSelectedItem();
        String search = billSearchField.getText().toLowerCase();
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        if (search.equals("")) {
            billPriceFrom.setFocusable(true);
            billPriceTo.setFocusable(true);
            showBillTable();
        } else {
            billPriceFrom.setFocusable(false);
            billPriceTo.setFocusable(false);
            switch (header) {
                case "Mã HĐ": {
                    for (HoaDon hd : qlhd.dshd) {
                        if (hd.getMaHD().toLowerCase().contains(search)) {
                            List<Object> temp = new LinkedList<>();
                            temp.add(hd.getMaHD());
                            temp.add(hd.getMaNV());
                            temp.add(hd.getMaKH());
                            temp.add(hd.getNgayLap());
                            temp.add(hd.getGioLap());
                            temp.add(hd.getTong());

                            result.put(count, temp);
                            count++;
                        }
                    }
                }
                break;
                case "Mã NV": {
                    for (HoaDon hd : qlhd.dshd) {
                        if (hd.getMaNV().toLowerCase().contains(search)) {
                            List<Object> temp = new LinkedList<>();
                            temp.add(hd.getMaHD());
                            temp.add(hd.getMaNV());
                            temp.add(hd.getMaKH());
                            temp.add(hd.getNgayLap());
                            temp.add(hd.getGioLap());
                            temp.add(hd.getTong());

                            result.put(count, temp);
                            count++;
                        }
                    }
                }
                break;
                case "Mã KH": {
                    for (HoaDon hd : qlhd.dshd) {
                        if (hd.getMaKH().toLowerCase().contains(search)) {
                            List<Object> temp = new LinkedList<>();
                            temp.add(hd.getMaHD());
                            temp.add(hd.getMaNV());
                            temp.add(hd.getMaKH());
                            temp.add(hd.getNgayLap());
                            temp.add(hd.getGioLap());
                            temp.add(hd.getTong());

                            result.put(count, temp);
                            count++;
                        }
                    }
                }
                break;
                case "Ngày lập": {
                    for (HoaDon hd : qlhd.dshd) {
                        if (hd.getNgayLap().toLowerCase().contains(search)) {
                            List<Object> temp = new LinkedList<>();
                            temp.add(hd.getMaHD());
                            temp.add(hd.getMaNV());
                            temp.add(hd.getMaKH());
                            temp.add(hd.getNgayLap());
                            temp.add(hd.getGioLap());
                            temp.add(hd.getTong());

                            result.put(count, temp);
                            count++;
                        }
                    }
                }
                break;
                case "Giờ lập": {
                    for (HoaDon hd : qlhd.dshd) {
                        if (hd.getGioLap().toLowerCase().contains(search)) {
                            List<Object> temp = new LinkedList<>();
                            temp.add(hd.getMaHD());
                            temp.add(hd.getMaNV());
                            temp.add(hd.getMaKH());
                            temp.add(hd.getNgayLap());
                            temp.add(hd.getGioLap());
                            temp.add(hd.getTong());

                            result.put(count, temp);
                            count++;
                        }
                    }
                }
                break;
            }
            if (!result.isEmpty()) {
                billModel.setRowCount(0);
                for (int i : result.keySet()) {
                    List<Object> records = result.get(i);
                    billModel.addRow(new Object[]{
                        records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), toMoney((int) records.get(5))
                    });
                }
            }
        }
        if (!search.equals("") && result.isEmpty()) {
            billModel.setRowCount(0);
        }
    }//GEN-LAST:event_billSearchFieldKeyReleased

    private void billPriceToKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPriceToKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(billPriceTo.getText())) {
            billPriceTo.setText("");
        } else {
            setBillTableSortByPrice();
        }
    }//GEN-LAST:event_billPriceToKeyReleased

    private void billPriceFromKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billPriceFromKeyReleased
        // TODO add your handling code here:
        if (!onlyNumber(billPriceFrom.getText())) {
            billPriceFrom.setText("");
        } else {
            setBillTableSortByPrice();
        }
    }//GEN-LAST:event_billPriceFromKeyReleased

    private void billTableRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billTableRefreshMouseClicked
        // TODO add your handling code here:
        showBillTable();
    }//GEN-LAST:event_billTableRefreshMouseClicked

    private void setBillTableSortByPrice() {
        Map<Integer, List<Object>> result = new HashMap<>();
        int count = 0;
        int from = 0;
        String s1 = billPriceFrom.getText().replaceAll("\\s+", "");
        String s2 = billPriceTo.getText().replaceAll("\\s+", "");
        if (s2.equals("")) {
            billSearchField.setFocusable(true);
            showBillTable();
        } else {
            billSearchField.setFocusable(false);
            if (!s1.equals("")) {
                from = Integer.parseInt(s1);
            }
            for (HoaDon hd : qlhd.dshd) {
                if (hd.getTong() >= from && hd.getTong() <= Integer.parseInt(s2)) {
                    List<Object> temp = new LinkedList<>();
                    temp.add(hd.getMaHD());
                    temp.add(hd.getMaNV());
                    temp.add(hd.getMaKH());
                    temp.add(hd.getNgayLap());
                    temp.add(hd.getGioLap());
                    temp.add(toMoney(hd.getTong()));

                    result.put(count, temp);
                    count++;
                }
            }
            if (!result.isEmpty()) {
                billModel.setRowCount(0);
                for (int i : result.keySet()) {
                    List<Object> records = result.get(i);
                    billModel.addRow(new Object[]{
                        records.get(0), records.get(1), records.get(2), records.get(3), records.get(4), records.get(5)
                    });
                }
            }
        }
        if (!s2.equals("") && result.isEmpty()) {
            billModel.setRowCount(0);
        }
    }

    private void showBillTable() {
        billModel = (DefaultTableModel) billTable.getModel();

        billModel.setRowCount(0);
        qlhd.readDB();

        for (HoaDon hd : qlhd.dshd) {
            billModel.addRow(new Object[]{
                hd.getMaHD(), hd.getMaNV(), hd.getMaKH(), hd.getNgayLap(), hd.getGioLap(), toMoney(hd.getTong())
            });
        }
    }

    private void setBillHeaders() {
        billHeadersComboBox.addItem("Mã HĐ");
        billHeadersComboBox.addItem("Mã NV");
        billHeadersComboBox.addItem("Mã KH");
        billHeadersComboBox.addItem("Ngày lập");
        billHeadersComboBox.addItem("Giờ lập");
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------           
//---------------------------------------------------------------- Main-EMPLOYEEPANEL ----------------------------------------------------------------------

    private void addEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEmployeeMouseClicked
        // TODO add your handling code here:
        if (!currentUser.equals("root")) {
            JOptionPane.showMessageDialog(rootPane, "Bạn không có quyển thêm nhân viên!!");
        } else {
            ThemNhanVien add = new ThemNhanVien();
            add.setVisible(true);
            add.setTitle("Thêm nhân viên");
            add.setLocationRelativeTo(null);
            add.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_addEmployeeMouseClicked

    private void deleteEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeMouseClicked
        // TODO add your handling code here:
        if (!currentUser.equals("root")) {
            JOptionPane.showMessageDialog(rootPane, "Bạn không có quyển xóa nhân viên!!");
        } else {
            int row = employeeTable.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "Chọn một nhân viên để xóa!!");
            } else {
                int reply = JOptionPane.showConfirmDialog(getRootPane(),
                        "Bạn có chắc muốn xoá nhân viên " + employeeTable.getValueAt(row, 0) + " không?", "Xác nhận",
                        JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    for (NhanVien nv : qlnv.dsnv) {
                        if (nv.getMaNV().equals(employeeTable.getValueAt(row, 0))) {
                            List<Object> cData = new LinkedList<>();
                            cData.add(nv.getMaNV());
                            List<String> cColumn = new LinkedList<>();
                            cColumn.add("employeeID");

                            int check = qlnv.Delete(cData, cColumn);
                            if (check == 1) {
                                JOptionPane.showMessageDialog(rootPane, "Xóa nhân viên thành công!!");
                                showEmployeeTable();
                            } else if (check == 2) {
                                JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình xóa nhân viên!!");
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình xóa nhân viên!!");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deleteEmployeeMouseClicked

    private void updateEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateEmployeeMouseClicked
        // TODO add your handling code here:
        if (!currentUser.equals("root")) {
            JOptionPane.showMessageDialog(rootPane, "Bạn không có quyển chỉnh sửa thông tin nhân viên!!");
        } else {
            int row = employeeTable.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "Chọn một nhân viên để chỉnh sửa thông tin!!");
            } else {
                CapNhatNhanVien update = new CapNhatNhanVien();
                update.setVisible(true);
                update.setTitle("Cập nhật thông tin nhân viên " + employeeTable.getValueAt(row, 0));
                update.setLocationRelativeTo(null);
                update.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                update.setMaNV((String) employeeTable.getValueAt(row, 0));
                for (NhanVien nv : qlnv.dsnv) {
                    if (nv.getMaNV().equals((String) employeeTable.getValueAt(row, 0))) {
                        update.setAllData(nv.getMaNV(), nv.getTen(), nv.getDob(), nv.getDiaChi(), nv.getSdt());
                    }
                }
            }
        }
    }//GEN-LAST:event_updateEmployeeMouseClicked

    private void refreshEmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshEmployeeTableMouseClicked
        // TODO add your handling code here:
        showEmployeeTable();
    }//GEN-LAST:event_refreshEmployeeTableMouseClicked

    private void showEmployeeTable() {
        employeeModel = (DefaultTableModel) employeeTable.getModel();

        employeeModel.setRowCount(0);
        qlnv.readDB();

        for (NhanVien nv : qlnv.dsnv) {
            employeeModel.addRow(new Object[]{
                nv.getMaNV(), nv.getTen(), nv.getDob(), nv.getDiaChi(), nv.getSdt()
            });
        }
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------          
//---------------------------------------------------------------- Main-CUSTOMERPANEL ----------------------------------------------------------------------
    private void addCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCustomerMouseClicked
        // TODO add your handling code here:
        ThemKhachHang add = new ThemKhachHang();
        add.setVisible(true);
        add.setTitle("Thêm khách hàng");
        add.setLocationRelativeTo(null);
        add.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        refreshCustomerComboBox();
    }//GEN-LAST:event_addCustomerMouseClicked

    private void deleteCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCustomerMouseClicked
        // TODO add your handling code here:
        int row = customerTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một nhân viên để xóa!!");
        } else {
            int reply = JOptionPane.showConfirmDialog(getRootPane(),
                    "Bạn có chắc muốn xoá khách hàng " + customerTable.getValueAt(row, 0) + " không?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                for (KhachHang kh : qlkh.dskh) {
                    if (kh.getMaKH().equals(customerTable.getValueAt(row, 0))) {
                        List<Object> cData = new LinkedList<>();
                        cData.add(kh.getMaKH());
                        List<String> cColumn = new LinkedList<>();
                        cColumn.add("customerID");

                        int check = qlkh.Delete(cData, cColumn);
                        if (check == 1) {
                            JOptionPane.showMessageDialog(rootPane, "Xóa khách hàng thành công!!");
                            showEmployeeTable();
                        } else if (check == 2) {
                            JOptionPane.showMessageDialog(rootPane, "Lỗi SQL trong quá trình xóa khách hàng!!");
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Lỗi hệ thống trong quá trình xóa khách hàng!!");
                        }
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_deleteCustomerMouseClicked

    private void updateCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCustomerMouseClicked
        // TODO add your handling code here:
        int row = customerTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một nhân viên để chỉnh sửa thông tin!!");
        } else {
            CapNhatKhachHang update = new CapNhatKhachHang();
            update.setVisible(true);
            update.setTitle("Cập nhật thông tin khách hàng " + customerTable.getValueAt(row, 0));
            update.setLocationRelativeTo(null);
            update.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            update.setMaNV((String) customerTable.getValueAt(row, 0));
            for (KhachHang kh : qlkh.dskh) {
                if (kh.getMaKH().equals((String) customerTable.getValueAt(row, 0))) {
                    update.setAllData(kh.getMaKH(), kh.getTen(), kh.getSdt(), kh.getDiaChi());
                }
            }
        }
    }//GEN-LAST:event_updateCustomerMouseClicked

    private void refreshCustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCustomerTableMouseClicked
        // TODO add your handling code here:
        showCustomerTable();
    }//GEN-LAST:event_refreshCustomerTableMouseClicked

    private void showCustomerTable() {
        customerModel = (DefaultTableModel) customerTable.getModel();

        customerModel.setRowCount(0);
        qlkh.readDB();

        for (KhachHang kh : qlkh.dskh) {
            customerModel.addRow(new Object[]{
                kh.getMaKH(), kh.getTen(), kh.getSdt(), kh.getDiaChi()
            });
        }
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------              
//---------------------------------------------------------------- Main-ACCOUNTPANEL ----------------------------------------------------------------------

    private void updateAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateAccountMouseClicked
        // TODO add your handling code here:
        int row = accountTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(rootPane, "Chọn một tài khoản để chỉnh sửa thông tin!!");
        } else {
            CapNhatTaiKhoan update = new CapNhatTaiKhoan();
            update.setVisible(true);
            update.setTitle("Cập nhật thông tin tài khoản " + accountTable.getValueAt(row, 0));
            update.setLocationRelativeTo(null);
            update.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            update.setUser((String) accountTable.getValueAt(row, 0));
            for (TaiKhoan tk : qltk.dstk) {
                if (tk.getUser().equals((String) accountTable.getValueAt(row, 0))) {
                    update.setData(tk.getRemember(), tk.getEnabled());
                }
            }
        }

    }//GEN-LAST:event_updateAccountMouseClicked

    private void refreshAccountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshAccountTableMouseClicked
        // TODO add your handling code here:
        showAccountTable();
    }//GEN-LAST:event_refreshAccountTableMouseClicked

    private void showAccountTable() {
        accountModel = (DefaultTableModel) accountTable.getModel();

        accountModel.setRowCount(0);
        qltk.readDB();

        for (TaiKhoan tk : qltk.dstk) {
            accountModel.addRow(new Object[]{
                tk.getUser(), tk.getPass(), tk.getType(), tk.getMaNV(), tk.getRemember(), tk.getEnabled()
            });
        }
    }

//-------------------------------------------------------------------------------------------------------------------------------------------------------------              
    private void CallAll() {

        addAllPanelAndLoadData();

        // Sell panel
        LoadDataToAllComboBox();
        showSellProduct();
        setBillID();
        setTotalPrice();

        // Book panel
        showBookTable();

        // Category panel
        showCategoryTable();

        // Bill panel
        showBillTable();
        setBillHeaders();

        // Employee panel
        showEmployeeTable();

        // Customer panel
        showCustomerTable();

        // Account panel
        showAccountTable();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QuanLy ql = new QuanLy();
                ql.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountManagement;
    private javax.swing.JPanel accountPanel;
    private javax.swing.JTable accountTable;
    private javax.swing.JLabel addBook;
    private javax.swing.JLabel addCategory;
    private javax.swing.JLabel addCustomer;
    private javax.swing.JLabel addEmployee;
    private javax.swing.JButton addToBill;
    private javax.swing.JComboBox<String> authorsComboBox;
    private javax.swing.JLabel billDetail;
    private javax.swing.JLabel billEmployee;
    private javax.swing.JComboBox<String> billHeadersComboBox;
    private javax.swing.JLabel billID;
    private javax.swing.JPanel billManagement;
    private javax.swing.JPanel billPanel;
    private javax.swing.JTextField billPriceFrom;
    private javax.swing.JTextField billPriceTo;
    private javax.swing.JTable billProductTable;
    private javax.swing.JTextField billSearchField;
    private javax.swing.JTable billTable;
    private javax.swing.JLabel billTableRefresh;
    private javax.swing.JLabel billTotalPrice;
    private javax.swing.JComboBox<String> bookAuthorsComboBox;
    private javax.swing.JComboBox<String> bookCategoriesComboBox;
    private javax.swing.JPanel bookManagement;
    private javax.swing.JPanel bookPanel;
    private javax.swing.JTextField bookPriceFrom;
    private javax.swing.JTextField bookPriceTo;
    private javax.swing.JTextField bookSearchField;
    private javax.swing.JTable bookTable;
    private javax.swing.JLabel cancelBill;
    private javax.swing.JComboBox<String> categoriesComboBox;
    private javax.swing.JPanel categoryManagement;
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JTable categoryTable;
    private javax.swing.JPanel customerManagement;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JTable customerTable;
    private javax.swing.JComboBox<String> customersComboBox;
    private javax.swing.JLabel deleteBook;
    private javax.swing.JLabel deleteCategory;
    private javax.swing.JLabel deleteCustomer;
    private javax.swing.JLabel deleteEmployee;
    private javax.swing.JTextField detailCategoryID;
    private javax.swing.JPanel detailLv1;
    private javax.swing.JTextField detailProductID;
    private javax.swing.JTextField detailProductName;
    private javax.swing.JPanel employeeManagement;
    private javax.swing.JLabel employeeName;
    private javax.swing.JPanel employeePanel;
    private javax.swing.JTable employeeTable;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JPanel main;
    private javax.swing.JPanel navBar;
    private javax.swing.JLabel payBill;
    private javax.swing.JTextField priceFrom;
    private javax.swing.JTextField priceTo;
    private javax.swing.JLabel productImg;
    private javax.swing.JScrollPane productScrollpane;
    private javax.swing.JTextField quantity;
    private javax.swing.JLabel refresh;
    private javax.swing.JLabel refreshAccountTable;
    private javax.swing.JLabel refreshCategory;
    private javax.swing.JLabel refreshCustomerTable;
    private javax.swing.JLabel refreshEmployeeTable;
    private javax.swing.JLabel removeProduct;
    private javax.swing.JPanel sellLeftPanel;
    private javax.swing.JPanel sellManagement;
    private javax.swing.JPanel sellPanel;
    private javax.swing.JTable sellProductTable;
    private javax.swing.JPanel sellRightPanel;
    private javax.swing.JTextField sellSearchField;
    private javax.swing.JPanel tempPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel updateAccount;
    private javax.swing.JLabel updateBook;
    private javax.swing.JLabel updateCategory;
    private javax.swing.JLabel updateCustomer;
    private javax.swing.JLabel updateEmployee;
    private javax.swing.JLabel watchBillDetail;
    private javax.swing.JLabel welcomeEmployee;
    // End of variables declaration//GEN-END:variables
}
